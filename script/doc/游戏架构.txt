本游戏模拟炉石传说，大致设计如下
1. 集群
	1.1 集群类型
		1. 帐号中心（支付中心也可以放到帐号中心做): accountcenter
		2. 游戏逻辑服: gamesrv
		3. 战斗管理/分配服: warsrvmgr
		4. 战斗服: warsrv
		5. 数据中心: datacenter(暂时只存了玩家简介)

	1.2	 集群通信
		1. 集群通信通过rpc实现，主要提供两个接口:
			cluster.call(srvname,protoname,cmd,...)
			被调用方报错，调用方也会报错，如果调用正常，则会原样返回被调用函数返回值
			cluster.pcall(srvname,protoname,cmd,...)
			用法同cluster.call,为安全调用，第一个返回值为bool值，表示调用是否成功，后续同cluster.call
		2. rpc调用举例
			假定gamesrv_100想给gamesrv_101服务器上玩家pid发封邮件:
			在gamesrv_100方调用
			cluster.call("gamesrv_101","rpc","mailmgr.sendmail",pid,{
						srcid = 发件人ID（0为系统邮件),
						author = "作者",
						title = "标题",
						content = "内容",
						attach = 附件内容（附件内容可以包含任何资源，具体格式用统一的奖励项格式,见award模块),
					})
			
			上面调用方式如果用"modmethod"协议调用，可以改成如下:
			cluster.call("gamesrv_100","modmethod","mailmgr",".sendmail",pid,{
						xxx -- 格式同上,
					}

2. 服务
	2.1 skynet为actor模型，设计上可以创建若干服务，不同服务完成不同的功能，相互协同完成游戏逻辑功能。
	2.2 已有服务类型
		1. 主服：游戏大部分逻辑都包含在此服，数据集中管理便于上帝视角控制游戏
		2. 日志服: 减少日志IO阻塞
		3. 数据库服: 减少数据库IO阻塞
		4. 场景服: 减少场景同步密集计算占用过多主服资源，因此独立成单独的服，现在设计上每个场景都是一个服，可以动态创建/销毁一个场景服(副本设计上有用)
		5. agent服： 每个连线对象（包括在线玩家）都对应一个agent服务，主服通过agent负责和客户端通信，agent收到的消息都转发给主服处理
		6. 监听客户端连接的gate服
		7. 监听其他服务器连接的gate服


3. 消息流
	3.1 c2s: client -> gate -> agent -> mainsrv
	3.2 s2c: mainsrv -> agent -> client
	3.3 s2s: srv1 -> cluster_gate -> srv2
